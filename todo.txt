# access the attributes of parent objects, recursively, to obtain attributes.
# an instance would take on the properties of it's parents as well as it's
# base classes. It's like attribute inheritance at an instance level

# ^ just because you can doesn't mean you should!

#The style dictated by the modules design lends itself to a well pronounced
#entry point when developing new components. 
#
#It helps to view all problems as the different variations of the same problem.
#Some of the strategies from the understood problems may overlap with the
#current ones 

# find patterns similar to a given name that may be typos of it

branch removal based on arguments. based on whatever arguments are provided
to the call, create new source with branches based on the condition removed.
    
an app for drawing/designing themes!

in memory encryption?
stream cipher, authenticated encryption with associated data for bytecode interpreter?
2 byte wide bytecode operators. Same number of instructions, ~65300 are errors?
history from storing hashes of shared secrets?
# cryptographically secure rate limiting based on session calculated from proof of work cracking hashes?

# no "magic expressions" in source code, i.e. expressions that unnamed/unassigned
# put a named version in the comments -or-
# unused names that are returned can be optimized into magic expressions
# by the compiler, i.e.:
    #memory = get_attribute("memory")
    #size = get_attribute("struct_size")
    #packed_structure = memory[:size]
    #structure = unpack_structure(packed_structure)
    #return getattr(structure, attribute)
    return getattr(unpack_structure(get_attribute("memory")[:get_attribute("size")]), 
                attribute)
  

 
# recursive sort? 

deter — detect — alarm — delay — respond

recently done:

known bugs:   
    fix z layer issue with multiple objects on the same space
            
things that could be done:
    
    patch inspect to get source from Compiler
    fix load
    make update work with gui objects
     
    develop the gui
    improve executable
    improve authentication2 - scrutiny for design pitfalls and errors - start anew with authentication3
    integrate ssl contexts into networkssl    
    pass in ssl commands and arguments to networkssl.generate_self_signed_certificate    
    class update feature
    --optimized flag that comments out alerts that are above a threshold. __debug__ flag
    persistent objects
    rotation descriptor on window objects. modify area based upon the given degrees of rotation about the center of the instance.
    
    preemptive multiprocessing?
    backport annotations ?
    branch pruning based on runtime analysis of arguments
    store name pruning? retrieve the runtime value of an attribute and pass it as an argument instead of looking it up
    
   
   
things other people could do:
-------------------------
security related:
    - penetration testing and security auditing of rpc/authentication
        - try to break your way in!      
        
gui design:
    - need cool looking themes!
        - very simple low level drawing api 
        - calls take the form of draw(shape, coordinates, color)
        - Opengl supported by sdl2 but not implemented anywhere yet
        
    - need graphical applications
        - need more widgets
        - assemble applications out of generic windows and containers and buttons        
        - customize mouse ui interaction via the click methods
        - customize keyboard interaction via the hotkeys dictionary
        
source code manipulation:        
    - source code optimization?
        - function inlining, constant folding, branch pruning, etc
        - remove "store name" operations for constants and pass names in as arguments?
            - i.e.:
                def math_stuff(a):
                    pi = 3.14
                    return pi * a
                    
                # change the above to:
                def math_stuff(a, pi):
                    return pi * a
                    
            - results in fewer bytecode operations in the function call?
            
    - source code obfuscation?
        - could maybe use compiler hook to obfuscate names across entire process instead of
          limited to one module like current best known tool
        - modify + - / *... etc to use magic method calls instead of operator expressions. 
          The magic method name could be obfuscated?
        - enumerate for loop that don't require enumeration
        - store/load names that are not used for anything
        
        
scratch space
------------------                      
            
class Reliable_Udp(network.Udp_Socket):
    
    def __init__(self, **kwargs):
        super(Reliable_Udp, self).__init__(**kwargs)
        self.response_to = {}
        
    def sendto(self, data, target, response_to_packet='None'):
        packet_id, packet = self.make_packet(data, response_to_packet)
        self.socket.sendto(packet, target)
        self.sent[packet_id] = (packet, target)
    
    def make_packet(self, data, response_to):
        packet = response_to + " " + data
        packet_id = hashlib.sha1(packet).digest()
        return (packet_id, packet_id + " " + packet)
        
    def recvfrom(self, network_packet_size):
        data, address = super(Reliable_Udp, self).recvfrom(network_packet_size)
        packet_id, response_to, flags, data = data.split(" ", 2)
        
        # flags = dont_reply, repeat_count
        
        if response_to not in self.sent:
            # responding to a packet not sent            
            if address not in self.conversation_partners:
                # haven't heard from you before either 
                pass
                
        elif response_to == "None":
            # a new conversation
            self.conversation_partners.add(address)
        else:
            del self.sent[response_to]
            
        return data
        
             
request1 sent
    answer1 received
        request2 sent
            answer2 received
                ...
                
request1 sent
    no answer received
        -= resend counter
        repeat request1
        
            answer1 arrives late
                expect and ignore repeat of answer1
                    answer1 arrives again, ignore
            
            
class Updateable(type):
    
    def __new__(cls, name, bases, attributes):
        attributes.setdefault("_update_counter", 0)
        attributes.setdefault("_instances" : [])
        new_class = super(Updateable, cls).__new__(cls, name bases, attributes)
        return new_class
     
    @classmethod
    def update(cls):
        source = inspect.getsource(cls) 
        class_name = cls.__name__
        module = utilities.create_module(class_name, source)
        new_class = getattr(module, class_name)
        
    #    with module_utilities.modules_preserved():
     #       sys.modules.clear()
            
        for name, value in cls.__dict__.items():
            if not callable(value)
                print "Updating {}.{} to {}".format(class_name, name, value)
                setattr(new_class, name, value)       
        
        new_instances = new_class._instances = []
        for instance in cls._instances:
            new_instance = new_class.__new__(new_class)
                  
            # a mini replacement __init__
            attributes = new_instance.defaults.copy()
            attributes["_required_modules"] = class_base._required_modules
            new_instance.set_attributes(**attributes)
            self.environment.add(new_instance)        
            
            attributes = self.__dict__
            self.environment.replace(self, new_instance)
            new_instance.set_attributes(**attributes)
            new_instances.append(new_instance)
        new_class._instances = new_instances
            
    def save(cls, _file=None):
        required_modules = []        
        module_loader = resolve_string(importer_type)()
        class_mro = _class.__mro__[:-1] # don't update object
        class_info = [(cls, cls.__module__) for cls in reversed(class_mro)]  # beginning at the root
                
        with mpre.module_utilities.modules_preserved(info[1] for info in class_info):
            for cls, module_name in class_info:    
                module = importlib.import_module(module_name)
                source = getattr(module, "_source", None) or inspect.getsource(module)
                required_modules.append((module_name, source, None))
    
        result = (cls.__name__, required_modules)
        if _file:
            pickle.dump(result, _file)
        else:
            return pickle.dumps(result)
            
    def load(cls, stream='', _file=None):
        assert stream or _file
        if _file:
            stream = _file.read()
        class_name, required_modules = pickle.loads(stream)
        with mpre.module_utilities.modules_preserved(info[0] for info in required_modules):
            sys.modules.clear()
            _required_modules = []
            for module_name, source, none in required_modules:
                    module = mpre.module_utilities.create_module(module_name, source)
                    _required_modules.append((module_name, source,        
                                             
                                
class Compiled(object):
    
    def __init__(self, function):
        self.function = function
        self.argument_types = {}
        # strip off leading/ending ( and )
        header = mpre.utilities.function_header(function)[1:-1]        
        arguments = self.arguments = header.split(", ")
        if arguments[0] == ''
            arguments.pop(0)
            
    def __call__(self, *args, **kwargs):
        # type each argument
        argument_types = self.argument_types
        for index, arg in enumerate(args):
            key = "arg_{}".format(index)
            if key in argument_types and type(arg) != argument_types[key]:
                # create a new compiled function with this altered signature
                                                
                                                
                                                
class Time_Adapter(mpre.base.Adapter):
        
    adaptations = {"year" : "tm_year", "month" : "tm_mon", 
                   "day_of_month" : "tm_mday", "hour" : "tm_hour", 
                   "minute" : "tm_min", "second" : "tm_sec", 
                   "day_of_week" : "tm_wday", "day_of_year" : "tm_yday",
                   "daylight_savings_time" : "tm_isdst"}                                                
                   
                   
def xor(input_one, input_two):
    return (input_one or input_two) and not (input_one and input_two)
    
def preprocess_file(filename='', _file=None, output_filename='', 
                    output_file=None, output_file_mode='w'):
    
    assert xor(filename, _file)
    if filename:
        with open(filename, 'r') as _file:
            source = _file.read()
    else:
        source = _file.read()
    source = pride.compiler.preprocess(source)
    if output_filename:
        with open(output_filename, 'w') as output_file:
            output_file.write(source)
            output_file.flush()
    elif output_file:
        output_file.write(source)
        output_file.flush()
    else:
        return source
        
def preprocess_package(package_name='', package=None):
    assert xor(package_name, package)
    if package_name:
        package = importlib.import_module(package_name)
           